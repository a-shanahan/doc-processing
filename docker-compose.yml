version: "3.9"
services:
  layout-p:
    depends_on:
      - doc_elasticsearch
      - kafka
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 3
        window: 120s
    build:
      context: ./layout_service
    volumes:
      - /Users/alexshanahan/Documents/GitHub/Document-Processing/file_storage:/file_storage
    container_name: "layout-parser"
    ports:
      - "5060:5060"
    expose:
      - "5060"

  upload:
    depends_on:
      - kafka
    build:
      context: ./upload_api
    volumes:
      - /Users/alexshanahan/Documents/GitHub/Layout-Parser/file_storage:/file_storage
    container_name: "upload-api"
    ports:
      - "5050:5050"
    expose:
      - "5050"


  doc_elasticsearch:
    build: ./elastic
    container_name: "doc_elasticsearch"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 3
        window: 120s
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    volumes:
#      - ./ci/data/es/db:/usr/share/elasticsearch/data
#      - ./ci/data/es/logs:/usr/share/elasticsearch/logs
#      - ./ci/data/es/repo:/usr/share/elasticsearch/repo
    ports:
      - "9200:9200"
    expose:
      - "9200"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    expose:
      - 9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  spark-master:
    build: ./spark-cluster
    depends_on:
      - connect
    command: >
      /bin/bash -c "echo >> /data/cron-job &&
              chmod 777 /data/main_spark.sh &&
              chmod 777 /data/sentiment_spark.sh &&
              service cron start &&
              cp /data/cron-job /etc/cron.d/ &&
              chmod 0644 /etc/cron.d/cron-job &&
              chmod 777 /start-spark.sh && /start-spark.sh
              "
    ports:
      - "9090:8080"
      - "7077:7077"
    environment:
      - SPARK_LOCAL_IP=spark-master
      - SPARK_WORKLOAD=master

  spark-worker-a:
    build: ./spark-cluster
    command: >
      /bin/bash -c "chmod 777 /start-spark.sh && /start-spark.sh"
    ports:
      - "9091:8080"
      - "7002:7000"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-a

  spark-worker-b:
      build: ./spark-cluster
      command: >
        /bin/bash -c "chmod 777 /start-spark.sh && /start-spark.sh"
      ports:
        - "9092:8080"
        - "7003:7000"
      depends_on:
        - spark-master
      environment:
        - SPARK_MASTER=spark://spark-master:7077
        - SPARK_WORKER_CORES=1
        - SPARK_WORKER_MEMORY=1G
        - SPARK_DRIVER_MEMORY=1G
        - SPARK_EXECUTOR_MEMORY=1G
        - SPARK_WORKLOAD=worker
        - SPARK_LOCAL_IP=spark-worker-b

  neo4j:
    image: arm64v8/neo4j
    hostname: neo4j
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_kafka_bootstrap_servers: kafka:9092
      NEO4J_AUTH: neo4j/connect
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'

  connect:
    image: confluentinc/cp-kafka-connect
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8083:8083"
    volumes:
      - ./neo4j-stream/plugins:/tmp/connect-plugins
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema_registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema_registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/tmp/connect-plugins
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=DEBUG,org.I0Itec.zkclient=DEBUG,org.reflections=ERROR
    command:
        /etc/confluent/docker/run

  schema_registry:
    image: confluentinc/cp-schema-registry
    hostname: schema_registry
    container_name: schema_registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: http://zookeeper:2181